AbstractQueuedSynchronizer state int类型32位，高16表示获取读锁线程数量，低16表示写锁重入数量
状态为0表示当前没有线程持有锁，
abstract static class Sync extends AbstractQueuedSynchronizer {

	static final int SHARED_SHIFT   = 16;
	读锁用高位部分，所以读锁个数加1，其实是状态值加 2^16，读锁起始值2^16。
	static final int SHARED_UNIT    = (1 << SHARED_SHIFT);
	读锁和写锁可重入最大数量
	static final int MAX_COUNT      = (1 << SHARED_SHIFT) - 1;
	写锁掩码
	static final int EXCLUSIVE_MASK = (1 << SHARED_SHIFT) - 1;
	表示读锁获取的数量，不为0表示当前有线程持有读锁，将当前数左移16位。
	static int sharedCount(int c)    { return c >>> SHARED_SHIFT; }
	表示写锁的重入数量，不为0表示当前有线程持有写锁，
	static int exclusiveCount(int c) { return c & EXCLUSIVE_MASK; }

	static final class HoldCounter {
		int count = 0;
		// Use id, not reference, to avoid garbage retention
		final long tid = getThreadId(Thread.currentThread());
	}

	
	static final class ThreadLocalHoldCounter
		extends ThreadLocal<HoldCounter> {
		public HoldCounter initialValue() {
			return new HoldCounter();
		}
	}

	private transient ThreadLocalHoldCounter readHolds;

	同线程read锁计数器 
	private transient HoldCounter cachedHoldCounter;

	
	private transient Thread firstReader = null;
	第一个读取锁线程锁计数器
	private transient int firstReaderHoldCount;

	Sync() {
		readHolds = new ThreadLocalHoldCounter();
		setState(getState()); // ensures visibility of readHolds
	}
}
writerShouldBlock当其他线程获取锁的时候是否应该阻塞
readerShouldBlock当其他线程获取锁的时候是否应该阻塞
static final class FairSync extends Sync {
	
	final boolean writerShouldBlock() {
		判断队列中是否有节点等待获取锁，如果有则当前线程阻塞
		return hasQueuedPredecessors();
	}
	final boolean readerShouldBlock() {
		return hasQueuedPredecessors();
	}
}

static final class NonfairSync extends Sync {
        非公平锁写线程不需要阻塞
        final boolean writerShouldBlock() {
            return false;
        }
        final boolean readerShouldBlock() {
			如果当前等待队列中，第一个等待获取锁的节点是一个写入锁，则返回true需要阻塞等待，如果不是则不需要阻塞
            return apparentlyFirstQueuedIsExclusive();
        }
    }
/**如果头节点的下一个节点是独占线程，为了防止独占线程也就是写线程饥饿等待，则后入线程应该排队，否则可以闯入*/
final boolean apparentlyFirstQueuedIsExclusive() {
	Node h, s;
	return (h = head) != null &&
		(s = h.next)  != null &&
		!s.isShared()         &&
		s.thread != null;
}
ReadLock
public void lock() {
	sync.acquireShared(1);
}
public final void acquireShared(int arg) {
	if (tryAcquireShared(arg) < 0)
		doAcquireShared(arg);
}
protected final int tryAcquireShared(int unused) {
	
	Thread current = Thread.currentThread();
	int c = getState();
	if (exclusiveCount(c) != 0 &&
		getExclusiveOwnerThread() != current)
	当前有写入锁，并且当前线程不是持有锁的线程，返回-1表示获取锁失败
		return -1;
	获取当前持有读取锁数量
	int r = sharedCount(c);
	非公平锁当前节点不是头节点并且头结点的后继接地那不为空并且当前后继几点不是共享锁，后继节点线程不为空，则当前节点阻塞返回true
	其他条件非阻塞，返回false
	当前sync队列没有等待获取锁的线程或者等待获取的的节点是读取锁类型
	并且当前持有锁的数量小于最大锁数量，并且使用cas将aqs状态state设置成功，则当前线程获取到读取锁
	if (!readerShouldBlock() &&
		r < MAX_COUNT &&
		compareAndSetState(c, c + SHARED_UNIT)) {
		if (r == 0) {
		如果当前持有锁的数量等于0表示当前没有线程持有锁
			当前线程则为第一个获取读取锁的节点
			firstReader = current;
			firstReaderHoldCount = 1;
		} else if (firstReader == current) {
			如果当前线程和第一个获取读取锁相同，则第一个读取锁计数器加1
			firstReaderHoldCount++;
		} else {
			每个线程特有锁计数器，如果当前线程没有计数器则创建一个，然后放入到存储计数器容器中
			然后计数器加1
			HoldCounter rh = cachedHoldCounter;
			if (rh == null || rh.tid != getThreadId(current))
				cachedHoldCounter = rh = readHolds.get();
			else if (rh.count == 0)
				readHolds.set(rh);
			rh.count++;
		}
		当前线程获取到读取锁
		return 1;
	}
	如果当前锁等待队列头结点后继节点为写入锁或者当前持有锁的线程数量超过最大数量
	或者有其他获取锁将当前aqs的state修改了
	return fullTryAcquireShared(current);
}
如果当前返回大于0表示当前有线程持有写入锁
static int exclusiveCount(int c) { return c & EXCLUSIVE_MASK; }
final int fullTryAcquireShared(Thread current) {
	
	HoldCounter rh = null;
	for (;;) {
		int c = getState();
		if (exclusiveCount(c) != 0) {
			if (getExclusiveOwnerThread() != current)
				return -1;
		} else if (readerShouldBlock()) {
			// Make sure we're not acquiring read lock reentrantly
			if (firstReader == current) {
				// assert firstReaderHoldCount > 0;
			} else {
				if (rh == null) {
					rh = cachedHoldCounter;
					if (rh == null || rh.tid != getThreadId(current)) {
						rh = readHolds.get();
						if (rh.count == 0)
							readHolds.remove();
					}
				}
				if (rh.count == 0)
					return -1;
			}
		}
		if (sharedCount(c) == MAX_COUNT)
			throw new Error("Maximum lock count exceeded");
		if (compareAndSetState(c, c + SHARED_UNIT)) {
			if (sharedCount(c) == 0) {
				firstReader = current;
				firstReaderHoldCount = 1;
			} else if (firstReader == current) {
				firstReaderHoldCount++;
			} else {
				if (rh == null)
					rh = cachedHoldCounter;
				if (rh == null || rh.tid != getThreadId(current))
					rh = readHolds.get();
				else if (rh.count == 0)
					readHolds.set(rh);
				rh.count++;
				cachedHoldCounter = rh; // cache for release
			}
			return 1;
		}
	}
}



























