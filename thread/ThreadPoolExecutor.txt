public ThreadPoolExecutor(int corePoolSize,
                              int maximumPoolSize,
                              long keepAliveTime,
                              TimeUnit unit,
                              BlockingQueue<Runnable> workQueue,
                              ThreadFactory threadFactory,
                              RejectedExecutionHandler handler) {
    }
corePoolSize 保留在线程池中线程数
maximumPoolSize 线程池中最大线程数
keepAliveTime  超过核心线程数空闲时间，超过时间多余线程被回收
unit   时间单位
workQueue   任务执行前放入该队列，此队列只放execute方法提交的任务
threadFactory  线程工厂 用于生成线程实例
handler    出现异常时，线程池拒绝策略
//11100000000000000000000000000000
private static final int RUNNING    = -1 << COUNT_BITS;    运行状态
//0
private static final int SHUTDOWN   =  0 << COUNT_BITS;    关闭状态
//100000000000000000000000000000
private static final int STOP       =  1 << COUNT_BITS;    停止状态
//1000000000000000000000000000000
private static final int TIDYING    =  2 << COUNT_BITS;    
//1100000000000000000000000000000
private static final int TERMINATED =  3 << COUNT_BITS;    终止状态
ctl 初始状态是running -1
private final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));

private static int workerCountOf(int c)  { return c & CAPACITY; }
//011111111111111111111111111111
private static final int CAPACITY   = (1 << COUNT_BITS) - 1;

private static final int COUNT_BITS = Integer.SIZE - 3;

private static int ctlOf(int rs, int wc) { return rs | wc; }
//执行任务
1.判断如果当前线程池线程个数小于 corePoolSize，如上图会在 workers 里面新增一个核心线程（core 线程）执行该任务。
2.如果当前线程池线程个数大于等于 corePoolSize 如果当前线程池处于 RUNNING 状态则添加当前任务到任务队列，
这里需要判断线程池状态是因为有可能线程池已经处于非 RUNNING 状态，而非 RUNNING 状态下是抛弃新任务的。
3.如果任务添加任务队列成功，则代码2.1对线程池状态进行二次校验，这是因为添加任务到任务队列后，有可能线程池的状态已经变化了，
这里进行二次校验，如果当前线程池状态不是 RUNNING 了则把任务从任务队列移除，移除后执行拒绝策略；
如果二次校验通过，则执行代码2.2重新判断当前线程池里面是否还有线程，如果没有则新增一个线程。
4.如果代码2添加任务失败，则说明任务队列满了，则执行代码3尝试新开启线程来执行该任务，如果当前线程池线程个数 > maximumPoolSize 则执行拒绝策略。
public void execute(Runnable command) {
	if (command == null)
		throw new NullPointerException();
	/*
	 * Proceed in 3 steps:
	 *
	 * 1. If fewer than corePoolSize threads are running, try to
	 * start a new thread with the given command as its first
	 * task.  The call to addWorker atomically checks runState and
	 * workerCount, and so prevents false alarms that would add
	 * threads when it shouldn't, by returning false.
	 *
	 * 2. If a task can be successfully queued, then we still need
	 * to double-check whether we should have added a thread
	 * (because existing ones died since last checking) or that
	 * the pool shut down since entry into this method. So we
	 * recheck state and if necessary roll back the enqueuing if
	 * stopped, or start a new thread if there are none.
	 *
	 * 3. If we cannot queue task, then we try to add a new
	 * thread.  If it fails, we know we are shut down or saturated
	 * and so reject the task.
	 */
	1.如果当前线程池线程数量少于corePoolSize，尝试给当前的任务创建一个新的线程，作为第一个任务，
	调用addWorker自动检查运行标志和工作数量防止假报警，返回false响应不应该执行的任务
	2.如果当前任务成功进入队列，我们仍多次检查是否已经添加和在加入的时候线程池挂掉。
	所以我们再次检查状态在需要时重新移出队列，或者重新启动一个新的线程
	3.如果我们不能将任务加入队列，我们会尝试新建一个线程，如果失败，我们知道是因为关闭还是因为饱和而拒绝当前任务
	int c = ctl.get();
	//1当前队列任务数量和容量与运算
	if (workerCountOf(c) < corePoolSize) {
	    //如果当前任务队列的任务数量小于当前核心线程数量，则开启新线程运行，将当前任务加入到工作线程队列
		//会在 workers 里面新增一个核心线程（core 线程）执行该任务。
		if (addWorker(command, true))
			return;
		c = ctl.get();
	}
	//2当前线程数量大于核心线程数量，或者中间addWorker 返回false
	//如果线程处于运行状态，则将当前任务加入到阻塞队列中
	if (isRunning(c) && workQueue.offer(command)) {
		int recheck = ctl.get();
		//2.1再次检查 如果当前线程池状态不是RUNNING则从队列删除任务，并执行拒绝策略
		if (! isRunning(recheck) && remove(command))
			reject(command);
		//2.2如果当前线程池线程空，则添加一个线程
		else if (workerCountOf(recheck) == 0)
			addWorker(null, false);
	}
	////3如果当前线程队列已满，新增线程，新增失败则执行拒绝策略
	else if (!addWorker(command, false))
		reject(command);
}
//当前线程池状态 是大于SHUTDOWN 0 当前状态不是SHUTDOWN  或者当前任务为空 或者当前队列是空  则加入当前任务失败 返回false
//如果当前线程任务数量大于等于总容量，或者当前大于核心线程数量或者最大线程数量，则加入当前任务失败 返回false
private boolean addWorker(Runnable firstTask, boolean core) {
	//只有cas设置当前线程任务数加一成功后结束当前循环  进行下一步
	retry:
	for (;;) {
		int c = ctl.get();
		int rs = runStateOf(c);

		// Check if queue empty only if necessary.
		//当前线程池状态 是大于SHUTDOWN 0 当前状态不是SHUTDOWN  或者当前任务为空 或者当前队列是空  则加入当前任务失败
		if (rs >= SHUTDOWN &&
			! (rs == SHUTDOWN &&
			   firstTask == null &&
			   ! workQueue.isEmpty()))
			return false;
		//循环cas增加线程个数
		for (;;) {
			获取当前线程数量
			int wc = workerCountOf(c);
			如果当前线程任务数量大于等于总容量，或者当前大于核心线程数量或者最大线程数量，则加入当前任务失败
			if (wc >= CAPACITY ||
				wc >= (core ? corePoolSize : maximumPoolSize))
				return false;
			//cas操作将当前队列工作任务加一，然后结束当前循环
			if (compareAndIncrementWorkerCount(c))
				break retry;
			c = ctl.get();  // Re-read ctl
			//cas设置任务数失败，如果当前线程池状态和进入方法时的状态不一致 则继续从头开始循环 否则内循环cas增加线程数量
			if (runStateOf(c) != rs)
				continue retry;
			// else CAS failed due to workerCount change; retry inner loop
		}
	}

	boolean workerStarted = false;
	boolean workerAdded = false;
	Worker w = null;
	try {
		//新建一个工作线程
		w = new Worker(firstTask);
		final Thread t = w.thread;
		if (t != null) {
			final ReentrantLock mainLock = this.mainLock;
			//加独占锁，为了workers同步，因为可能多个线程调用了线程池的execute方法。
			mainLock.lock();
			try {
				// Recheck while holding lock.
				// Back out on ThreadFactory failure or if
				// shut down before lock acquired.
				//获取当前线程状态
				int rs = runStateOf(ctl.get());
				//如果当前线程状态是运行状态，或者是shutdown并且当前要执行的任务为空
				if (rs < SHUTDOWN ||
					(rs == SHUTDOWN && firstTask == null)) {
					if (t.isAlive()) // precheck that t is startable
						throw new IllegalThreadStateException();
					//将当前worker线程添加到worker队列
					workers.add(w);
					int s = workers.size();
					if (s > largestPoolSize)
						largestPoolSize = s;
					workerAdded = true;
				}
			} finally {
				mainLock.unlock();
			}
			//如果已经添加到worker队列队列
			if (workerAdded) {
				则启动当前worker线程
				t.start();
				workerStarted = true;
			}
		}
	} finally {
		if (! workerStarted)
		如果当前线程没有启动
			则将添加失败worker线程
			addWorkerFailed(w);
	}
	return workerStarted;
}
//将当前worker从worker队列中移除
//将当前线程数减一
//尝试设置终止状态
private void addWorkerFailed(Worker w) {
	final ReentrantLock mainLock = this.mainLock;
	mainLock.lock();
	try {
		if (w != null)
			workers.remove(w);
		decrementWorkerCount();
		tryTerminate();
	} finally {
		mainLock.unlock();
	}
}
//cas设置当前线程数量减一
private void decrementWorkerCount() {
	do {} while (! compareAndDecrementWorkerCount(ctl.get()));
}

final void tryTerminate() {
	for (;;) {
		int c = ctl.get();
		//如果当前线程池状态是running或者当前的状态是大于TIDYING状态或者 当前状态是SHUTDOWN并且当前任务队列为不为空
		if (isRunning(c) ||
			runStateAtLeast(c, TIDYING) ||
			(runStateOf(c) == SHUTDOWN && ! workQueue.isEmpty()))
			return;
		当前任务数量不为0
		if (workerCountOf(c) != 0) { // Eligible to terminate
			//将线程worker列表中的第一个线程状态设置为interrupt
			interruptIdleWorkers(ONLY_ONE);
			return;
		}

		final ReentrantLock mainLock = this.mainLock;
		mainLock.lock();
		try {
			//cas设置线程状态为TIDYING
			if (ctl.compareAndSet(c, ctlOf(TIDYING, 0))) {
				try {
					//设置终止 空实现
					terminated();
				} finally {
					//然后将当前的状态设置为TERMINATED
					ctl.set(ctlOf(TERMINATED, 0));
					//唤醒所有condition的线程
					termination.signalAll();
				}
				return;
			}
		} finally {
			mainLock.unlock();
		}
		// else retry on failed CAS
	}
}
private final class Worker extends AbstractQueuedSynchronizer implements Runnable{

	Worker(Runnable firstTask) {
		为了避免当前 worker 在调用 runWorker 方法前被中断（当其它线程调用了线程池的 shutdownNow 时候，如果 worker 状态 >= 0 则会中断该线程）。这里设置了线程的状态为 -1，所以该线程就不会被中断了。代码运行 runWorker 的代码时候会调用 unlock 方法，该方法把 status 变为了 0，所以这时候调用 shutdownNow 会中断 worker 线程了。
		setState(-1); // 在调用runWorker前禁止中断
		this.firstTask = firstTask;
		this.thread = getThreadFactory().newThread(this);//创建一个线程
	}
	public void run() {
		runWorker(this);
	}

}

final void runWorker(Worker w) {
	Thread wt = Thread.currentThread();
	Runnable task = w.firstTask;
	w.firstTask = null;
	w.unlock(); // allow interrupts
	boolean completedAbruptly = true;
	try {
		while (task != null || (task = getTask()) != null) {
			w.lock();
			// If pool is stopping, ensure thread is interrupted;
			// if not, ensure thread is not interrupted.  This
			// requires a recheck in second case to deal with
			// shutdownNow race while clearing interrupt
			if ((runStateAtLeast(ctl.get(), STOP) ||
				 (Thread.interrupted() &&
				  runStateAtLeast(ctl.get(), STOP))) &&
				!wt.isInterrupted())
				wt.interrupt();
			try {
				beforeExecute(wt, task);
				Throwable thrown = null;
				try {
					task.run();
				} catch (RuntimeException x) {
					thrown = x; throw x;
				} catch (Error x) {
					thrown = x; throw x;
				} catch (Throwable x) {
					thrown = x; throw new Error(x);
				} finally {
					afterExecute(task, thrown);
				}
			} finally {
				task = null;
				w.completedTasks++;
				w.unlock();
			}
		}
		completedAbruptly = false;
	} finally {
		processWorkerExit(w, completedAbruptly);
	}
}